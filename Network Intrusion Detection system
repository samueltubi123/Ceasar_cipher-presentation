{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/samueltubi123/Ceasar_cipher-presentation/blob/main/Network%20Intrusion%20Detection%20system\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Lryl0e_d9Vhd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "68199c18-455d-4efc-850b-23962e517520"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: ipykernel in /usr/local/lib/python3.10/dist-packages (5.5.6)\n",
            "Requirement already satisfied: ipython-genutils in /usr/local/lib/python3.10/dist-packages (from ipykernel) (0.2.0)\n",
            "Requirement already satisfied: ipython>=5.0.0 in /usr/local/lib/python3.10/dist-packages (from ipykernel) (7.34.0)\n",
            "Requirement already satisfied: traitlets>=4.1.0 in /usr/local/lib/python3.10/dist-packages (from ipykernel) (5.7.1)\n",
            "Requirement already satisfied: jupyter-client in /usr/local/lib/python3.10/dist-packages (from ipykernel) (6.1.12)\n",
            "Requirement already satisfied: tornado>=4.2 in /usr/local/lib/python3.10/dist-packages (from ipykernel) (6.3.3)\n",
            "Requirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.0.0->ipykernel) (67.7.2)\n",
            "Collecting jedi>=0.16 (from ipython>=5.0.0->ipykernel)\n",
            "  Downloading jedi-0.19.1-py2.py3-none-any.whl (1.6 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.6/1.6 MB\u001b[0m \u001b[31m15.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: decorator in /usr/local/lib/python3.10/dist-packages (from ipython>=5.0.0->ipykernel) (4.4.2)\n",
            "Requirement already satisfied: pickleshare in /usr/local/lib/python3.10/dist-packages (from ipython>=5.0.0->ipykernel) (0.7.5)\n",
            "Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.0.0->ipykernel) (3.0.47)\n",
            "Requirement already satisfied: pygments in /usr/local/lib/python3.10/dist-packages (from ipython>=5.0.0->ipykernel) (2.16.1)\n",
            "Requirement already satisfied: backcall in /usr/local/lib/python3.10/dist-packages (from ipython>=5.0.0->ipykernel) (0.2.0)\n",
            "Requirement already satisfied: matplotlib-inline in /usr/local/lib/python3.10/dist-packages (from ipython>=5.0.0->ipykernel) (0.1.7)\n",
            "Requirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.0.0->ipykernel) (4.9.0)\n",
            "Requirement already satisfied: jupyter-core>=4.6.0 in /usr/local/lib/python3.10/dist-packages (from jupyter-client->ipykernel) (5.7.2)\n",
            "Requirement already satisfied: pyzmq>=13 in /usr/local/lib/python3.10/dist-packages (from jupyter-client->ipykernel) (24.0.1)\n",
            "Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.10/dist-packages (from jupyter-client->ipykernel) (2.8.2)\n",
            "Requirement already satisfied: parso<0.9.0,>=0.8.3 in /usr/local/lib/python3.10/dist-packages (from jedi>=0.16->ipython>=5.0.0->ipykernel) (0.8.4)\n",
            "Requirement already satisfied: platformdirs>=2.5 in /usr/local/lib/python3.10/dist-packages (from jupyter-core>=4.6.0->jupyter-client->ipykernel) (4.2.2)\n",
            "Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.10/dist-packages (from pexpect>4.3->ipython>=5.0.0->ipykernel) (0.7.0)\n",
            "Requirement already satisfied: wcwidth in /usr/local/lib/python3.10/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython>=5.0.0->ipykernel) (0.2.13)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.1->jupyter-client->ipykernel) (1.16.0)\n",
            "Installing collected packages: jedi\n",
            "Successfully installed jedi-0.19.1\n"
          ]
        }
      ],
      "source": [
        "!pip install ipykernel"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wrrWbXIPrVIp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4c154299-8112-4517-cbac-e85a29944b2a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "pandas : 2.0.3\n",
            "numpy : 1.25.2\n",
            "matplotlib : 3.7.1\n",
            "seaborn : 0.13.1\n",
            "sklearn : 1.2.2\n",
            "imblearn : 0.10.1\n"
          ]
        }
      ],
      "source": [
        "# import relevant modules\n",
        "%matplotlib inline\n",
        "import matplotlib\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import sklearn\n",
        "import imblearn\n",
        "import sys\n",
        "\n",
        "# Ignore warnings\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "# Settings\n",
        "pd.set_option('display.max_columns', None)\n",
        "np.set_printoptions(threshold=sys.maxsize)\n",
        "np.set_printoptions(precision=3)\n",
        "sns.set(style=\"darkgrid\")\n",
        "plt.rcParams['axes.labelsize'] = 14\n",
        "plt.rcParams['xtick.labelsize'] = 12\n",
        "plt.rcParams['ytick.labelsize'] = 12\n",
        "\n",
        "print(\"pandas : {0}\".format(pd.__version__))\n",
        "print(\"numpy : {0}\".format(np.__version__))\n",
        "print(\"matplotlib : {0}\".format(matplotlib.__version__))\n",
        "print(\"seaborn : {0}\".format(sns.__version__))\n",
        "print(\"sklearn : {0}\".format(sklearn.__version__))\n",
        "print(\"imblearn : {0}\".format(imblearn.__version__))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4n9MmFhSrYjF"
      },
      "outputs": [],
      "source": [
        "# Dataset field names\n",
        "datacols = [\"duration\",\"protocol_type\",\"service\",\"flag\",\"src_bytes\",\n",
        "    \"dst_bytes\",\"land\",\"wrong_fragment\",\"urgent\",\"hot\",\"num_failed_logins\",\n",
        "    \"logged_in\",\"num_compromised\",\"root_shell\",\"su_attempted\",\"num_root\",\n",
        "    \"num_file_creations\",\"num_shells\",\"num_access_files\",\"num_outbound_cmds\",\n",
        "    \"is_host_login\",\"is_guest_login\",\"count\",\"srv_count\",\"serror_rate\",\n",
        "    \"srv_serror_rate\",\"rerror_rate\",\"srv_rerror_rate\",\"same_srv_rate\",\n",
        "    \"diff_srv_rate\",\"srv_diff_host_rate\",\"dst_host_count\",\"dst_host_srv_count\",\n",
        "    \"dst_host_same_srv_rate\",\"dst_host_diff_srv_rate\",\"dst_host_same_src_port_rate\",\n",
        "    \"dst_host_srv_diff_host_rate\",\"dst_host_serror_rate\",\"dst_host_srv_serror_rate\",\n",
        "    \"dst_host_rerror_rate\",\"dst_host_srv_rerror_rate\",\"attack\", \"last_flag\"]\n",
        "\n",
        "# Load NSL_KDD train dataset\n",
        "dfkdd_train = pd.read_table(\"/content/drive/MyDrive/KDDTrain.txt\", sep=\",\", names=datacols) # change path to where the dataset is located.\n",
        "dfkdd_train = dfkdd_train.iloc[:,:-1] # removes an unwanted extra field\n",
        "\n",
        "# Load NSL_KDD test dataset\n",
        "dfkdd_test = pd.read_table(\"/content/drive/MyDrive/KDDTest.txt\", sep=\",\", names=datacols)\n",
        "dfkdd_test = dfkdd_test.iloc[:,:-1]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nFqX8vKBsasF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a75f95a6-807a-485b-9a60-fa56654a8dee"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train set dimension: 125973 rows, 42 columns\n"
          ]
        }
      ],
      "source": [
        "# View train data\n",
        "dfkdd_train.head(3)\n",
        "\n",
        "# train set dimension\n",
        "print('Train set dimension: {} rows, {} columns'.format(dfkdd_train.shape[0], dfkdd_train.shape[1]))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t1in2_smsai4",
        "outputId": "a2e7045b-01ff-4c0e-c403-5745ae193dfb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test set dimension: 22544 rows, 42 columns\n"
          ]
        }
      ],
      "source": [
        "# View test data\n",
        "dfkdd_test.head(3)\n",
        "\n",
        "# test set dimension\n",
        "print('Test set dimension: {} rows, {} columns'.format(dfkdd_test.shape[0], dfkdd_test.shape[1]))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eiKZszA2sZpr"
      },
      "outputs": [],
      "source": [
        "mapping = {'ipsweep': 'Probe','satan': 'Probe','nmap': 'Probe','portsweep': 'Probe','saint': 'Probe','mscan': 'Probe',\n",
        "        'teardrop': 'DoS','pod': 'DoS','land': 'DoS','back': 'DoS','neptune': 'DoS','smurf': 'DoS','mailbomb': 'DoS',\n",
        "        'udpstorm': 'DoS','apache2': 'DoS','processtable': 'DoS',\n",
        "        'perl': 'U2R','loadmodule': 'U2R','rootkit': 'U2R','buffer_overflow': 'U2R','xterm': 'U2R','ps': 'U2R',\n",
        "        'sqlattack': 'U2R','httptunnel': 'U2R',\n",
        "        'ftp_write': 'R2L','phf': 'R2L','guess_passwd': 'R2L','warezmaster': 'R2L','warezclient': 'R2L','imap': 'R2L',\n",
        "        'spy': 'R2L','multihop': 'R2L','named': 'R2L','snmpguess': 'R2L','worm': 'R2L','snmpgetattack': 'R2L',\n",
        "        'xsnoop': 'R2L','xlock': 'R2L','sendmail': 'R2L',\n",
        "        'normal': 'Normal'\n",
        "        }"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9f8e0_8azTO4"
      },
      "outputs": [],
      "source": [
        "# Apply attack class mappings to the dataset\n",
        "dfkdd_train['attack_class'] = dfkdd_train['attack'].apply(lambda v: mapping[v])\n",
        "dfkdd_test['attack_class'] = dfkdd_test['attack'].apply(lambda v: mapping[v])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9-FlhesxtwXB"
      },
      "outputs": [],
      "source": [
        "# Drop attack field from both train and test data\n",
        "dfkdd_train.drop(['attack'], axis=1, inplace=True)\n",
        "dfkdd_test.drop(['attack'], axis=1, inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 163
        },
        "id": "mmy5hivztwTq",
        "outputId": "95bc8ab5-4a66-4b6b-8bb7-61b8b4aecb07"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   duration protocol_type   service flag  src_bytes  dst_bytes  land  \\\n",
              "0         0           tcp  ftp_data   SF        491          0     0   \n",
              "1         0           udp     other   SF        146          0     0   \n",
              "2         0           tcp   private   S0          0          0     0   \n",
              "\n",
              "   wrong_fragment  urgent  hot  num_failed_logins  logged_in  num_compromised  \\\n",
              "0               0       0    0                  0          0                0   \n",
              "1               0       0    0                  0          0                0   \n",
              "2               0       0    0                  0          0                0   \n",
              "\n",
              "   root_shell  su_attempted  num_root  num_file_creations  num_shells  \\\n",
              "0           0             0         0                   0           0   \n",
              "1           0             0         0                   0           0   \n",
              "2           0             0         0                   0           0   \n",
              "\n",
              "   num_access_files  num_outbound_cmds  is_host_login  is_guest_login  count  \\\n",
              "0                 0                  0              0               0      2   \n",
              "1                 0                  0              0               0     13   \n",
              "2                 0                  0              0               0    123   \n",
              "\n",
              "   srv_count  serror_rate  srv_serror_rate  rerror_rate  srv_rerror_rate  \\\n",
              "0          2          0.0              0.0          0.0              0.0   \n",
              "1          1          0.0              0.0          0.0              0.0   \n",
              "2          6          1.0              1.0          0.0              0.0   \n",
              "\n",
              "   same_srv_rate  diff_srv_rate  srv_diff_host_rate  dst_host_count  \\\n",
              "0           1.00           0.00                 0.0             150   \n",
              "1           0.08           0.15                 0.0             255   \n",
              "2           0.05           0.07                 0.0             255   \n",
              "\n",
              "   dst_host_srv_count  dst_host_same_srv_rate  dst_host_diff_srv_rate  \\\n",
              "0                  25                    0.17                    0.03   \n",
              "1                   1                    0.00                    0.60   \n",
              "2                  26                    0.10                    0.05   \n",
              "\n",
              "   dst_host_same_src_port_rate  dst_host_srv_diff_host_rate  \\\n",
              "0                         0.17                          0.0   \n",
              "1                         0.88                          0.0   \n",
              "2                         0.00                          0.0   \n",
              "\n",
              "   dst_host_serror_rate  dst_host_srv_serror_rate  dst_host_rerror_rate  \\\n",
              "0                   0.0                       0.0                  0.05   \n",
              "1                   0.0                       0.0                  0.00   \n",
              "2                   1.0                       1.0                  0.00   \n",
              "\n",
              "   dst_host_srv_rerror_rate attack_class  \n",
              "0                       0.0       Normal  \n",
              "1                       0.0       Normal  \n",
              "2                       0.0          DoS  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b2066add-7e04-4d1f-a9e9-e1d90173a3b6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>duration</th>\n",
              "      <th>protocol_type</th>\n",
              "      <th>service</th>\n",
              "      <th>flag</th>\n",
              "      <th>src_bytes</th>\n",
              "      <th>dst_bytes</th>\n",
              "      <th>land</th>\n",
              "      <th>wrong_fragment</th>\n",
              "      <th>urgent</th>\n",
              "      <th>hot</th>\n",
              "      <th>num_failed_logins</th>\n",
              "      <th>logged_in</th>\n",
              "      <th>num_compromised</th>\n",
              "      <th>root_shell</th>\n",
              "      <th>su_attempted</th>\n",
              "      <th>num_root</th>\n",
              "      <th>num_file_creations</th>\n",
              "      <th>num_shells</th>\n",
              "      <th>num_access_files</th>\n",
              "      <th>num_outbound_cmds</th>\n",
              "      <th>is_host_login</th>\n",
              "      <th>is_guest_login</th>\n",
              "      <th>count</th>\n",
              "      <th>srv_count</th>\n",
              "      <th>serror_rate</th>\n",
              "      <th>srv_serror_rate</th>\n",
              "      <th>rerror_rate</th>\n",
              "      <th>srv_rerror_rate</th>\n",
              "      <th>same_srv_rate</th>\n",
              "      <th>diff_srv_rate</th>\n",
              "      <th>srv_diff_host_rate</th>\n",
              "      <th>dst_host_count</th>\n",
              "      <th>dst_host_srv_count</th>\n",
              "      <th>dst_host_same_srv_rate</th>\n",
              "      <th>dst_host_diff_srv_rate</th>\n",
              "      <th>dst_host_same_src_port_rate</th>\n",
              "      <th>dst_host_srv_diff_host_rate</th>\n",
              "      <th>dst_host_serror_rate</th>\n",
              "      <th>dst_host_srv_serror_rate</th>\n",
              "      <th>dst_host_rerror_rate</th>\n",
              "      <th>dst_host_srv_rerror_rate</th>\n",
              "      <th>attack_class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>tcp</td>\n",
              "      <td>ftp_data</td>\n",
              "      <td>SF</td>\n",
              "      <td>491</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>150</td>\n",
              "      <td>25</td>\n",
              "      <td>0.17</td>\n",
              "      <td>0.03</td>\n",
              "      <td>0.17</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.05</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Normal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>udp</td>\n",
              "      <td>other</td>\n",
              "      <td>SF</td>\n",
              "      <td>146</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.08</td>\n",
              "      <td>0.15</td>\n",
              "      <td>0.0</td>\n",
              "      <td>255</td>\n",
              "      <td>1</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.60</td>\n",
              "      <td>0.88</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Normal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>tcp</td>\n",
              "      <td>private</td>\n",
              "      <td>S0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>123</td>\n",
              "      <td>6</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.05</td>\n",
              "      <td>0.07</td>\n",
              "      <td>0.0</td>\n",
              "      <td>255</td>\n",
              "      <td>26</td>\n",
              "      <td>0.10</td>\n",
              "      <td>0.05</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>DoS</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b2066add-7e04-4d1f-a9e9-e1d90173a3b6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b2066add-7e04-4d1f-a9e9-e1d90173a3b6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b2066add-7e04-4d1f-a9e9-e1d90173a3b6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a7c30f48-ceb0-4e1b-825d-2c051268ef53\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a7c30f48-ceb0-4e1b-825d-2c051268ef53')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a7c30f48-ceb0-4e1b-825d-2c051268ef53 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dfkdd_train"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "# View top 3 train data\n",
        "dfkdd_train.head(3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "MZ_l5tQRtwQ7",
        "outputId": "8bd9c7ce-9db1-4525-9ae5-5d38e15306af"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           duration     src_bytes     dst_bytes           land  \\\n",
              "count  125973.00000  1.259730e+05  1.259730e+05  125973.000000   \n",
              "mean      287.14465  4.556674e+04  1.977911e+04       0.000198   \n",
              "std      2604.51531  5.870331e+06  4.021269e+06       0.014086   \n",
              "min         0.00000  0.000000e+00  0.000000e+00       0.000000   \n",
              "25%         0.00000  0.000000e+00  0.000000e+00       0.000000   \n",
              "50%         0.00000  4.400000e+01  0.000000e+00       0.000000   \n",
              "75%         0.00000  2.760000e+02  5.160000e+02       0.000000   \n",
              "max     42908.00000  1.379964e+09  1.309937e+09       1.000000   \n",
              "\n",
              "       wrong_fragment         urgent            hot  num_failed_logins  \\\n",
              "count   125973.000000  125973.000000  125973.000000      125973.000000   \n",
              "mean         0.022687       0.000111       0.204409           0.001222   \n",
              "std          0.253530       0.014366       2.149968           0.045239   \n",
              "min          0.000000       0.000000       0.000000           0.000000   \n",
              "25%          0.000000       0.000000       0.000000           0.000000   \n",
              "50%          0.000000       0.000000       0.000000           0.000000   \n",
              "75%          0.000000       0.000000       0.000000           0.000000   \n",
              "max          3.000000       3.000000      77.000000           5.000000   \n",
              "\n",
              "           logged_in  num_compromised     root_shell   su_attempted  \\\n",
              "count  125973.000000    125973.000000  125973.000000  125973.000000   \n",
              "mean        0.395736         0.279250       0.001342       0.001103   \n",
              "std         0.489010        23.942042       0.036603       0.045154   \n",
              "min         0.000000         0.000000       0.000000       0.000000   \n",
              "25%         0.000000         0.000000       0.000000       0.000000   \n",
              "50%         0.000000         0.000000       0.000000       0.000000   \n",
              "75%         1.000000         0.000000       0.000000       0.000000   \n",
              "max         1.000000      7479.000000       1.000000       2.000000   \n",
              "\n",
              "            num_root  num_file_creations     num_shells  num_access_files  \\\n",
              "count  125973.000000       125973.000000  125973.000000     125973.000000   \n",
              "mean        0.302192            0.012669       0.000413          0.004096   \n",
              "std        24.399618            0.483935       0.022181          0.099370   \n",
              "min         0.000000            0.000000       0.000000          0.000000   \n",
              "25%         0.000000            0.000000       0.000000          0.000000   \n",
              "50%         0.000000            0.000000       0.000000          0.000000   \n",
              "75%         0.000000            0.000000       0.000000          0.000000   \n",
              "max      7468.000000           43.000000       2.000000          9.000000   \n",
              "\n",
              "       num_outbound_cmds  is_host_login  is_guest_login          count  \\\n",
              "count           125973.0  125973.000000   125973.000000  125973.000000   \n",
              "mean                 0.0       0.000008        0.009423      84.107555   \n",
              "std                  0.0       0.002817        0.096612     114.508607   \n",
              "min                  0.0       0.000000        0.000000       0.000000   \n",
              "25%                  0.0       0.000000        0.000000       2.000000   \n",
              "50%                  0.0       0.000000        0.000000      14.000000   \n",
              "75%                  0.0       0.000000        0.000000     143.000000   \n",
              "max                  0.0       1.000000        1.000000     511.000000   \n",
              "\n",
              "           srv_count    serror_rate  srv_serror_rate    rerror_rate  \\\n",
              "count  125973.000000  125973.000000    125973.000000  125973.000000   \n",
              "mean       27.737888       0.284485         0.282485       0.119958   \n",
              "std        72.635840       0.446456         0.447022       0.320436   \n",
              "min         0.000000       0.000000         0.000000       0.000000   \n",
              "25%         2.000000       0.000000         0.000000       0.000000   \n",
              "50%         8.000000       0.000000         0.000000       0.000000   \n",
              "75%        18.000000       1.000000         1.000000       0.000000   \n",
              "max       511.000000       1.000000         1.000000       1.000000   \n",
              "\n",
              "       srv_rerror_rate  same_srv_rate  diff_srv_rate  srv_diff_host_rate  \\\n",
              "count    125973.000000  125973.000000  125973.000000       125973.000000   \n",
              "mean          0.121183       0.660928       0.063053            0.097322   \n",
              "std           0.323647       0.439623       0.180314            0.259830   \n",
              "min           0.000000       0.000000       0.000000            0.000000   \n",
              "25%           0.000000       0.090000       0.000000            0.000000   \n",
              "50%           0.000000       1.000000       0.000000            0.000000   \n",
              "75%           0.000000       1.000000       0.060000            0.000000   \n",
              "max           1.000000       1.000000       1.000000            1.000000   \n",
              "\n",
              "       dst_host_count  dst_host_srv_count  dst_host_same_srv_rate  \\\n",
              "count   125973.000000       125973.000000           125973.000000   \n",
              "mean       182.148945          115.653005                0.521242   \n",
              "std         99.206213          110.702741                0.448949   \n",
              "min          0.000000            0.000000                0.000000   \n",
              "25%         82.000000           10.000000                0.050000   \n",
              "50%        255.000000           63.000000                0.510000   \n",
              "75%        255.000000          255.000000                1.000000   \n",
              "max        255.000000          255.000000                1.000000   \n",
              "\n",
              "       dst_host_diff_srv_rate  dst_host_same_src_port_rate  \\\n",
              "count           125973.000000                125973.000000   \n",
              "mean                 0.082951                     0.148379   \n",
              "std                  0.188922                     0.308997   \n",
              "min                  0.000000                     0.000000   \n",
              "25%                  0.000000                     0.000000   \n",
              "50%                  0.020000                     0.000000   \n",
              "75%                  0.070000                     0.060000   \n",
              "max                  1.000000                     1.000000   \n",
              "\n",
              "       dst_host_srv_diff_host_rate  dst_host_serror_rate  \\\n",
              "count                125973.000000         125973.000000   \n",
              "mean                      0.032542              0.284452   \n",
              "std                       0.112564              0.444784   \n",
              "min                       0.000000              0.000000   \n",
              "25%                       0.000000              0.000000   \n",
              "50%                       0.000000              0.000000   \n",
              "75%                       0.020000              1.000000   \n",
              "max                       1.000000              1.000000   \n",
              "\n",
              "       dst_host_srv_serror_rate  dst_host_rerror_rate  \\\n",
              "count             125973.000000         125973.000000   \n",
              "mean                   0.278485              0.118832   \n",
              "std                    0.445669              0.306557   \n",
              "min                    0.000000              0.000000   \n",
              "25%                    0.000000              0.000000   \n",
              "50%                    0.000000              0.000000   \n",
              "75%                    1.000000              0.000000   \n",
              "max                    1.000000              1.000000   \n",
              "\n",
              "       dst_host_srv_rerror_rate  \n",
              "count             125973.000000  \n",
              "mean                   0.120240  \n",
              "std                    0.319459  \n",
              "min                    0.000000  \n",
              "25%                    0.000000  \n",
              "50%                    0.000000  \n",
              "75%                    0.000000  \n",
              "max                    1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5024d6d0-8c9a-416d-b99a-b1e1ddf698b5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>duration</th>\n",
              "      <th>src_bytes</th>\n",
              "      <th>dst_bytes</th>\n",
              "      <th>land</th>\n",
              "      <th>wrong_fragment</th>\n",
              "      <th>urgent</th>\n",
              "      <th>hot</th>\n",
              "      <th>num_failed_logins</th>\n",
              "      <th>logged_in</th>\n",
              "      <th>num_compromised</th>\n",
              "      <th>root_shell</th>\n",
              "      <th>su_attempted</th>\n",
              "      <th>num_root</th>\n",
              "      <th>num_file_creations</th>\n",
              "      <th>num_shells</th>\n",
              "      <th>num_access_files</th>\n",
              "      <th>num_outbound_cmds</th>\n",
              "      <th>is_host_login</th>\n",
              "      <th>is_guest_login</th>\n",
              "      <th>count</th>\n",
              "      <th>srv_count</th>\n",
              "      <th>serror_rate</th>\n",
              "      <th>srv_serror_rate</th>\n",
              "      <th>rerror_rate</th>\n",
              "      <th>srv_rerror_rate</th>\n",
              "      <th>same_srv_rate</th>\n",
              "      <th>diff_srv_rate</th>\n",
              "      <th>srv_diff_host_rate</th>\n",
              "      <th>dst_host_count</th>\n",
              "      <th>dst_host_srv_count</th>\n",
              "      <th>dst_host_same_srv_rate</th>\n",
              "      <th>dst_host_diff_srv_rate</th>\n",
              "      <th>dst_host_same_src_port_rate</th>\n",
              "      <th>dst_host_srv_diff_host_rate</th>\n",
              "      <th>dst_host_serror_rate</th>\n",
              "      <th>dst_host_srv_serror_rate</th>\n",
              "      <th>dst_host_rerror_rate</th>\n",
              "      <th>dst_host_srv_rerror_rate</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>125973.00000</td>\n",
              "      <td>1.259730e+05</td>\n",
              "      <td>1.259730e+05</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.0</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "      <td>125973.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>287.14465</td>\n",
              "      <td>4.556674e+04</td>\n",
              "      <td>1.977911e+04</td>\n",
              "      <td>0.000198</td>\n",
              "      <td>0.022687</td>\n",
              "      <td>0.000111</td>\n",
              "      <td>0.204409</td>\n",
              "      <td>0.001222</td>\n",
              "      <td>0.395736</td>\n",
              "      <td>0.279250</td>\n",
              "      <td>0.001342</td>\n",
              "      <td>0.001103</td>\n",
              "      <td>0.302192</td>\n",
              "      <td>0.012669</td>\n",
              "      <td>0.000413</td>\n",
              "      <td>0.004096</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000008</td>\n",
              "      <td>0.009423</td>\n",
              "      <td>84.107555</td>\n",
              "      <td>27.737888</td>\n",
              "      <td>0.284485</td>\n",
              "      <td>0.282485</td>\n",
              "      <td>0.119958</td>\n",
              "      <td>0.121183</td>\n",
              "      <td>0.660928</td>\n",
              "      <td>0.063053</td>\n",
              "      <td>0.097322</td>\n",
              "      <td>182.148945</td>\n",
              "      <td>115.653005</td>\n",
              "      <td>0.521242</td>\n",
              "      <td>0.082951</td>\n",
              "      <td>0.148379</td>\n",
              "      <td>0.032542</td>\n",
              "      <td>0.284452</td>\n",
              "      <td>0.278485</td>\n",
              "      <td>0.118832</td>\n",
              "      <td>0.120240</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>2604.51531</td>\n",
              "      <td>5.870331e+06</td>\n",
              "      <td>4.021269e+06</td>\n",
              "      <td>0.014086</td>\n",
              "      <td>0.253530</td>\n",
              "      <td>0.014366</td>\n",
              "      <td>2.149968</td>\n",
              "      <td>0.045239</td>\n",
              "      <td>0.489010</td>\n",
              "      <td>23.942042</td>\n",
              "      <td>0.036603</td>\n",
              "      <td>0.045154</td>\n",
              "      <td>24.399618</td>\n",
              "      <td>0.483935</td>\n",
              "      <td>0.022181</td>\n",
              "      <td>0.099370</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.002817</td>\n",
              "      <td>0.096612</td>\n",
              "      <td>114.508607</td>\n",
              "      <td>72.635840</td>\n",
              "      <td>0.446456</td>\n",
              "      <td>0.447022</td>\n",
              "      <td>0.320436</td>\n",
              "      <td>0.323647</td>\n",
              "      <td>0.439623</td>\n",
              "      <td>0.180314</td>\n",
              "      <td>0.259830</td>\n",
              "      <td>99.206213</td>\n",
              "      <td>110.702741</td>\n",
              "      <td>0.448949</td>\n",
              "      <td>0.188922</td>\n",
              "      <td>0.308997</td>\n",
              "      <td>0.112564</td>\n",
              "      <td>0.444784</td>\n",
              "      <td>0.445669</td>\n",
              "      <td>0.306557</td>\n",
              "      <td>0.319459</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.090000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>82.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>0.050000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.00000</td>\n",
              "      <td>4.400000e+01</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>255.000000</td>\n",
              "      <td>63.000000</td>\n",
              "      <td>0.510000</td>\n",
              "      <td>0.020000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.00000</td>\n",
              "      <td>2.760000e+02</td>\n",
              "      <td>5.160000e+02</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>143.000000</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.060000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>255.000000</td>\n",
              "      <td>255.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.070000</td>\n",
              "      <td>0.060000</td>\n",
              "      <td>0.020000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>42908.00000</td>\n",
              "      <td>1.379964e+09</td>\n",
              "      <td>1.309937e+09</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>77.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>7479.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>7468.000000</td>\n",
              "      <td>43.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>511.000000</td>\n",
              "      <td>511.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>255.000000</td>\n",
              "      <td>255.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5024d6d0-8c9a-416d-b99a-b1e1ddf698b5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5024d6d0-8c9a-416d-b99a-b1e1ddf698b5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5024d6d0-8c9a-416d-b99a-b1e1ddf698b5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-84bbb1e8-8cbb-4b42-831d-62cf9e176edc\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-84bbb1e8-8cbb-4b42-831d-62cf9e176edc')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-84bbb1e8-8cbb-4b42-831d-62cf9e176edc button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "# Descriptive statistics\n",
        "dfkdd_train.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ntARL0mHtwNc",
        "outputId": "c69b4b68-23bf-4e66-ecc7-896903bc1459"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "num_outbound_cmds\n",
              "0    22544\n",
              "Name: count, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "dfkdd_train['num_outbound_cmds'].value_counts()\n",
        "dfkdd_test['num_outbound_cmds'].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PTLbWVzrtvyL"
      },
      "outputs": [],
      "source": [
        "# 'num_outbound_cmds' field has all 0 values. Hence, it will be removed from both train and test dataset since it is a redundant field.\n",
        "dfkdd_train.drop(['num_outbound_cmds'], axis=1, inplace=True)\n",
        "dfkdd_test.drop(['num_outbound_cmds'], axis=1, inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "XEUcY5ca4bUR",
        "outputId": "02135eb3-4ada-4fbe-d815-09bd02296b59"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              attack_class  frequency_percent_train  attack_class  \\\n",
              "attack_class                                                        \n",
              "Normal               67343                    53.46          9711   \n",
              "DoS                  45927                    36.46          7458   \n",
              "Probe                11656                     9.25          2421   \n",
              "R2L                    995                     0.79          2754   \n",
              "U2R                     52                     0.04           200   \n",
              "\n",
              "              frequency_percent_test  \n",
              "attack_class                          \n",
              "Normal                         43.08  \n",
              "DoS                            33.08  \n",
              "Probe                          10.74  \n",
              "R2L                            12.22  \n",
              "U2R                             0.89  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-46ffc74d-8f67-4f9f-a1a0-653adb2b8917\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>attack_class</th>\n",
              "      <th>frequency_percent_train</th>\n",
              "      <th>attack_class</th>\n",
              "      <th>frequency_percent_test</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>attack_class</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Normal</th>\n",
              "      <td>67343</td>\n",
              "      <td>53.46</td>\n",
              "      <td>9711</td>\n",
              "      <td>43.08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DoS</th>\n",
              "      <td>45927</td>\n",
              "      <td>36.46</td>\n",
              "      <td>7458</td>\n",
              "      <td>33.08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Probe</th>\n",
              "      <td>11656</td>\n",
              "      <td>9.25</td>\n",
              "      <td>2421</td>\n",
              "      <td>10.74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>R2L</th>\n",
              "      <td>995</td>\n",
              "      <td>0.79</td>\n",
              "      <td>2754</td>\n",
              "      <td>12.22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>U2R</th>\n",
              "      <td>52</td>\n",
              "      <td>0.04</td>\n",
              "      <td>200</td>\n",
              "      <td>0.89</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-46ffc74d-8f67-4f9f-a1a0-653adb2b8917')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-46ffc74d-8f67-4f9f-a1a0-653adb2b8917 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-46ffc74d-8f67-4f9f-a1a0-653adb2b8917');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-76241b8d-bb13-416d-b200-26e74e34faa6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-76241b8d-bb13-416d-b200-26e74e34faa6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-76241b8d-bb13-416d-b200-26e74e34faa6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_90f608eb-19ac-49f3-9ab8-2cfd5d497e41\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('attack_class_dist')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_90f608eb-19ac-49f3-9ab8-2cfd5d497e41 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('attack_class_dist');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "attack_class_dist",
              "repr_error": "cannot insert attack_class, already exists"
            }
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "# Attack Class Distribution\n",
        "attack_class_freq_train = dfkdd_train[['attack_class']].apply(lambda x: x.value_counts())\n",
        "attack_class_freq_test = dfkdd_test[['attack_class']].apply(lambda x: x.value_counts())\n",
        "attack_class_freq_train['frequency_percent_train'] = round((100 * attack_class_freq_train / attack_class_freq_train.sum()),2)\n",
        "attack_class_freq_test['frequency_percent_test'] = round((100 * attack_class_freq_test / attack_class_freq_test.sum()),2)\n",
        "\n",
        "attack_class_dist = pd.concat([attack_class_freq_train,attack_class_freq_test], axis=1)\n",
        "attack_class_dist"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 535
        },
        "id": "gpB68Wpq4ueS",
        "outputId": "8ba0bacf-e062-4e81-a023-8f9400baee14"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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7dsXn332Gby9vbF7925V+JDL5RqvywotZmZmhdksgMydk8kKVXaByGQlM43mRiaTQRAK/gshJjwXZY9UKoVUKtPp3zgVHM+HeJT0c6FNMCmWd/5u3brh9u3b+Pfff+Hk5AQAiIyM1FguMjIStra2vF2YiIiIclQswSQ1NRUAkJSUhAoVKsDe3h537tzRWO7WrVtwdXUtjk0SERFRKaRVMImOjtaYlp6ejsDAQJiZmaku73Tt2hXnzp3DmzdvVMtdunQJz549Q/fu3YtYMhEREZVWWl2s+vbbb5GUlIQPPvgAFSpUQGRkJA4dOoSnT59i5syZKFeuHADA29sbx48fx4gRIzBixAgkJydj/fr1cHZ2xoABA3SyI0RERFTyaRVMevbsiT179mD79u2Ii4tDuXLlUL9+fUyfPh2dOnVSLVexYkVs2bIFixYtwi+//KJ6Vs7MmTPZv4SIiIhypVUw+fDDD/Hhhx8WaNk6depg/fr1hSqKiIiIyqbSdT8mERERlWgMJkRERCQaDCZEREQkGgwmREREJBoMJkRERCQaDCZEREQkGgwmREREJBoMJkRERCQaDCZEREQkGgwmREREJBoMJkRERCQaDCZEREQkGgwmREREJBoMJkRERCQaDCZEREQkGgwmREREJBoMJkRERCQaDCZEREQkGgwmREREJBoMJkRERCQaDCZEREQkGgwmREREJBoMJkRERCQaDCZEREQkGgwmREREJBoMJkRERCQaDCZEREQkGgwmREREJBoMJkRERCQaDCZEREQkGgwmREREJBoMJkRERCQaDCZEREQkGgwmREREJBoMJkRERCQaDCZEREQkGgwmREREJBoMJkRERCQaDCZEREQkGgwmREREJBoMJkRERCQaDCZEREQkGgwmREREJBoMJkRERCQaDCZEREQkGgwmREREJBoMJkRERCQaDCZEREQkGgwmREREJBoMJkRERCQaDCZEREQkGgwmREREJBpG2ix869YtHDhwAJcvX8arV69ga2uLxo0bY8qUKXj//ffVln3y5AkWLFiA69evw9jYGJ6enpg1axbs7e2LdQeIiIio9NAqmPj5+eH69evo3r07XFxcEBkZia1bt6J///7YuXMnnJ2dAQBhYWEYOnQorKysMHXqVCQnJ2PDhg14+PAhdu/eDRMTE53sDBEREZVsWgWTkSNHYsmSJWrBomfPnujVqxfWrVuHJUuWAADWrFmDlJQU7Nu3D5UqVQIANGrUCKNGjcL+/fsxaNCgYtwFIiIiKi206mPSrFkzjdaOGjVqoE6dOnj69KlqWlBQENq3b68KJQDQunVr1KhRA8eOHStiyURERFRaadVikhNBEBAVFYU6deoAAMLDwxEdHY0GDRpoLNuoUSOcP3++yNtTKDKKtI68SCQyna3bEBQKBRQKhaHLKBSei7JFqVRAqVRCqeQxEgOeD/EoDedCEIQCL1vkYHLw4EGEh4dj0qRJAICIiAgAgKOjo8ayjo6OiIuLg1wuL3Q/E0EQkJKSVPiC82FiYgzAWmfr17e0tGTI5emGLqNQeC7KFqVSiYwMOVJSAKmUNwwaGs+HeJSGcyEIVgVetkjB5MmTJ5g7dy6aNm2Kfv36AQDS0tIAIMfgYWpqCgBITU0tdDCRSCQwN7csZMX5MzIqXd/STU0tIJOVzJTNc1G2KJUKpKQA5ublIJWWrnNfEvF8iEdpOBcSiaTAyxY6mERGRmLs2LGwsrLC8uXLIZNlHqys8CGXyzVekxVazMzMCrtZSCQSyGRFbujJlUxWMtNobmQyGQSh4L8QYsJzUfZIpVJIpTKd/o1TwfF8iEdJPxc6DyaJiYkYM2YMEhMTsXXrVlSoUEE1z8nJCUBmcHlXZGQkbG1tebswERER5UjrYJKWlgZvb288e/YM/v7+qF27ttr8ChUqwN7eHnfu3NF47a1bt+Dq6lr4aomIiKhU06qtXKFQYMqUKbh58yaWL1+Opk2b5rhc165dce7cObx580Y17dKlS3j27Bm6d+9etIqJiIio1NKqxWTRokU4c+YMOnTogLi4OAQGBqrN79OnDwDA29sbx48fx4gRIzBixAgkJydj/fr1cHZ2xoABA4qveiIiIipVtAom9+/fBwCcPXsWZ8+e1ZifFUwqVqyILVu2YNGiRfjll19Uz8qZOXMm+5cQERFRrrQKJgEBAQVetk6dOli/fr3WBREREVHZVbruxyQiIqISjcGEiIiIRIPBhIiIiESDwYSIiIhEg8GEiIiIRIPBhIiIiESDwYSIiIhEg8GEiIiIRIPBhIiIiESDwYSIiIhEg8GEiIiIRIPBhIiIiESDwYSIiIhEg8GEiIiIRIPBhIiIiESDwYSIiIhEg8GEiIiIRIPBhIiIiESDwYSIiIhEg8GEiIiIRIPBhIiIiESDwYSIiIhEg8GEiIiIRIPBhIiIiESDwYSIiIhEg8GEiIiIRIPBhIiIiESDwYSIiIhEg8GEiIiIRIPBhIiIiESDwYSIiIhEg8GEiIiIRIPBhIiIiESDwYSIiIhEg8GEiIiIRIPBhIiIiESDwYSIiIhEg8GEiIiIRIPBhIiIiESDwYSIiIhEg8GEiIiIRIPBhIiIiETDyNAFEBGROMlkMhgZySCT6eY7rFIpQKkUdLJuKrkYTIiISINUKkGVyhUglcl0tg2lQoHYuBSGE1LDYEJERBqkUimkMhkiDiyDPDq02Ndv4lAFTn2nQCqVMJiQGgYTIiLKlTw6FPKwfw1dBpUh7PxKREREosFgQkRERKLBYEJERESiwWBCREREosFgQkRERKLBu3KISDR0PaAXwEG9iMRO62Dy9u1brF+/Hv/88w9u376N+Ph4LFy4EP3799dY9smTJ1iwYAGuX78OY2NjeHp6YtasWbC3ty+W4omo9NDHgF4AB/UiEjutg0lsbCxWrlyJSpUqwcXFBVeuXMlxubCwMAwdOhRWVlaYOnUqkpOTsWHDBjx8+BC7d++GiYlJkYsnotJD1wN6ARzUi6gk0DqYODk54eLFi3B0dMTt27cxcODAHJdbs2YNUlJSsG/fPlSqVAkA0KhRI4waNQr79+/HoEGDilY5EZVKHNCLqGzT+kKuiYkJHB0d810uKCgI7du3V4USAGjdujVq1KiBY8eOabtZIiIiKgN00vk1PDwc0dHRaNCggca8Ro0a4fz584VetyAIUCgyilJeniQS3V7f1jeFQgGFQmHoMgqF56Js0XHXEjU8F/nT1/ngucifUqmAUqmEUllyj5MgFPzSqU6CSUREBADk2LLi6OiIuLg4yOXyQvUzEQQBKSlJRa4xNyYmxgCsdbZ+fUtLS4Zcnm7oMgqF56JsMTLS302CPBf509f54LnIn1KpREaGHCkpmX2xSiJBsCrwsjr5zUtLSwOAHIOHqakpACA1NbVQwUQikcDc3LJoBebByKh0fUs3NbWATFYyUzbPRdmizxYTnov86et88FzkT6lUICUFMDcvB6m0ZL4vSiSSAi+rk2CSFT7kcrnGvKzQYmZmVqh1SyQSyGS6S/K6HD/BEGQyGQSh4L8QYsJzUbZIJPq7S4bnIn/6Oh88FwUjlUohlcp0+vmnS9oEE5288zs5OQEAIiMjNeZFRkbC1taWtwsTERGRBp1ErwoVKsDe3h537tzRmHfr1i24urrqYrNEpGNSqQRSqa6+3XJcESLS4ZD0Xbt2xYEDB/DmzRtUrFgRAHDp0iU8e/YMI0eO1NVmiUhHpFIJbG0tSt0lNiISl0IFky1btiAhIUF1983Zs2cRFhYGABg+fDisrKzg7e2N48ePY8SIERgxYgSSk5Oxfv16ODs7Y8CAAcW3B0SkF1KpBDKZFEu2BiM0PLHY19/M1QkjetYr9vUSUclSqGCyYcMGvHr1SvVzUFAQgoKCAAC9e/eGlZUVKlasiC1btmDRokX45ZdfVM/KmTlzJvuXEJVgoeGJePIqvtjXW8VJd3fbEVHJUahgcubMmQItV6dOHaxfv74wmyAiIqIyiBeLiYiISDQYTIiIiEg0GEyIiIhINBhMiIiISDQYTIiIiEg0GEyIiIhINBhMiIiISDQYTIiIiEg0GEyIiIhINBhMiIiISDQYTIiIiEg0GEyIiIhINBhMiIiISDQYTIiIiEg0GEyIiIhINBhMiIiISDQYTIiIiEg0GEyIiIhINBhMiIiISDQYTIiIiEg0GEyIiIhINBhMiIiISDQYTIiIiEg0GEyIiIhINBhMiIiISDQYTIiIiEg0GEyIiIhINBhMiIiISDQYTIiIiEg0GEyIiIhINBhMiIiISDQYTIiIiEg0GEyIiIhINBhMiIiISDQYTIiIiEg0GEyIiIhINBhMiIiISDQYTIiIiEg0GEyIiIhINBhMiIiISDQYTIiIiEg0GEyIiIhINBhMiIiISDQYTIiIiEg0GEyIiIhINBhMiIiISDQYTIiIiEg0GEyIiIhINBhMiIiISDQYTIiIiEg0jAxdABEREeVNJpPByEgGmUx37QlKpQClUtDZ+guKwYSIqASSSiWQSiU63ILhP6Aok1QqQZXKFSCVyXS6HaVCgdi4FIOHE50GE7lcjuXLlyMwMBAJCQlwcXHBlClT0KZNG11uloioVJNKJbC1tdDpt2cSD6lUCqlMhogDyyCPDtXJNkwcqsCp7xRIpZLSHUxmzpyJEydOYMSIEahRowb279+PL774Aps2bYKbm5suN01EVGpJpRLIZFIs2RqM0PBEnWyjmasTRvSsp5N1U+HIo0MhD/vX0GXonM6Cya1bt3DkyBHMmDEDo0ePBgD07dsXXl5eWLJkCXbs2KGrTRMRlQmh4Yl48ipeJ+uu4mSpk/US5Udn7YDHjx+HTCbDoEGDVNNMTU0xcOBA3LhxA2/evNHVpomIiKiEkgiCoJOLSaNGjUJ4eDiOHj2qNv3SpUsYOXIkVq9ejY4dO2q9XkEQoFAoi6tMDRJJZhNpXGIaMnS0HVMTGawsTKB4Gw9BkaGTbUhkRpCVs4FCoYSOTrHO8VyIi67PB89FwZWGv43Sci4AQCIBAF12RAZkMmmJ/tuQyaSQSAp2jHR2KScyMhKOjo4a07OmRUREFGq9EokERka67ZkMALZWpjrfhqycje63UQo6x/FciIuuzwfPRcGVhr+N0nIu9KGs/G3orILU1FSYmJhoTDc1NVXNJyIiIspOZ8HEzMwMcrlcY3paWppqPhEREVF2Ogsmjo6OiIyM1JieNc3JyUlXmyYiIqISSmfBxNXVFc+ePUNSUpLa9H/++QcAULduXV1tmoiIiEoonQWT7t27Q6FQYOfOnappcrkc+/btQ+PGjVGxYkVdbZqIiIhKKJ3dldO4cWN0794dS5cuRXR0NKpXr479+/fj1atXmD9/vq42S0RERCWYzsYxATI7ui5btgyHDh1CfHw8XFxcMHnyZLRt21ZXmyQiIqISTKfBhIiIiEgbhh9JhYiIiOj/MZgQERGRaDCYEBERkWgwmBAREZFoMJgQERGRaDCYEBERkWgwmBAREZFoMJgQERGRaDCYEJHByeVy3LhxA6dOnUJMTIyhy6EcPH78GIcOHTJ0GVQG6OxZOWXdiBEjtH6NRCLBpk2bdFAN5eXJkyc4fvw4IiMjUbNmTfTv3x+WlpaGLqvM2Lx5M3777TckJiYCADZs2IBWrVohJiYGPXr0wFdffYWBAwcauEo6efIkVqxYgV69ehm6lDLv4sWLWLduHTZv3mzoUnSCwURHCjPSP58OoDtbtmxBQEAAtm/fDnt7e9X0M2fOYPLkyUhPT1dNCwgIwM6dO9WWI93Yu3cvFixYgA8//BBt2rTB7NmzVfPs7e3h7u6Oo0ePMphQmXH79m28fPkS1tbW+OCDD2Bqaqqad/ToUfj5+eHevXuwtrY2YJW6xWCiIwEBAYYugbI5c+YMqlatqhY2MjIy8M0330Amk2Hu3Llo0KABzp07h2XLlmHNmjVqH5KkG/7+/ujUqRN++eUXxMbGasyvX78+/5aoTEhMTIS3tzeuX7+umubg4IDff/8dJiYm+OqrrxASEoIKFSpgxowZ+Pjjjw1YrW4xmFCZ8PjxY40/5MuXLyMmJgZjx45Fv379AAB16tTB/fv38ccffzCY6MHz588xfPjwXOfb2toiLi5OfwURGcjy5csRHByMnj17onnz5ggNDcX27dsxc+ZMREdHw9TUFAsWLECvXr1gZFS6P7pL996JVFJSEpKSkqBUKjXmVapUyQAVlX5xcXF477331KZdunQJEokEXbp0UZverFkznDx5Up/llVnW1tY5tpRkefz4MRwdHfVYEZFhnDlzBj169MDSpUtV02rXro05c+agSZMm2LBhAywsLAxYof4wmOjRtm3bsHHjRrx8+TLXZUJCQvRYUdlRvnx5REVFqU27du0azMzM4OrqqjbdxMQExsbG+iyvzGrXrh127dqFIUOGaMx79OgRdu/ejQEDBhigsrLB39+/wMtmv8RAxS8iIgKtWrVSm5b184gRI8pMKAEYTPRm+/btmDt3Ljw8PDBgwAD8+uuvGDlyJExNTbFv3z6UL18+zyZtKpoGDRpg//79GDZsGCwtLfHo0SPcvn0bnTp10mgWffr0qUbrCunGlClT8PHHH8PLywsdOnSARCLBgQMHsHfvXgQFBcHR0RE+Pj6GLrPU+umnn7RaXiKR6KgSysjIgLm5udq0rJ/t7OwMUZLBMJjoyZYtW+Dh4QE/Pz/Exsbi119/haenJ1q1aoXPP/8cAwYM4LV0HRo/fjwGDhyIbt26oXbt2rh79y4kEgm++OILjWVPnjwJd3d3A1RZ9lSoUAH79u3D0qVLcezYMQiCgMDAQJQrVw4ffvghpk+fzrujdOj06dOGLoGySUlJUfsciI+PBwC8ffs2x88HW1tb/RSmZxKB96jqRcOGDTFz5kwMHToUSUlJcHNzw7p169CuXTsAwLp167Br1y6cOnXKwJWWXtevX8eaNWvw8uVLVKpUCaNHj0br1q3Vlrl8+TLmzZuHr7/+Gh4eHgaqtOyKiYmBUqmEvb09pFKO/0hlh6ura44tUoIg5NpSVVov/bPFRE+srKygUCgAAJaWljA3N0dYWJhqfrly5TT6QFDxatasGdatW5fnMi1btuTolgYiCILqTZiXDKismTBhgqFLEA0GEz3Jug01S+PGjbF9+3Z4enpCqVRi586dqFGjhuEKLMNSU1MBAGZmZgaupGx6/PgxVqxYgQsXLqidi7Zt22LChAlwdnY2cIWl36VLl/D06VPY2dmhXbt2OY58fPPmTezcuRMLFy40QIWlH4PJf3gpR0/27t2LHTt2YOvWrTAxMUFwcDBGjRqlGnHUyMgIvr6+aN++vWELLSNev34NX19f/PHHH6rbVe3s7ODp6YkJEyagcuXKBq6wbLh27RrGjBkDpVKJTp06qcL5v//+izNnzkAikcDPzw9ubm6GLbSUksvlGDNmDK5cuaIaedrKygrTp0/HoEGD1JY9ePAgvv7661J7+YDEg8HEgF6+fIkzZ85AJpOhTZs2eP/99w1dUpnw5MkTDBkyBImJiWjdujVq1aoFIPNunD///BPW1tbYtm0batasaeBKS7/+/fsjPj4eW7ZsQcWKFdXmvXnzBkOHDoWdnR327t1roApLt9WrV8PX1xfjx49Hly5dEBkZCT8/P/z999/46KOP8P3336v6+jCY6E9ycjLMzc1zvaQZExODJ0+e4IMPPtBzZXoiEJUx48aNE9zd3YX79+9rzHvw4IHQqlUrwcfHxwCVlT0NGzYU/Pz8cp2/bt06oVGjRnqsqGzx8vISZs+erTF99erVgqurqzBu3DghLS1NEARBCAwMFFxdXfVdYpmyb98+oX379oKrq6vQpEkTYebMmUJERITGcqX9XLDbuwEolUrEx8cjLi5O4z/SvatXr2L48OFwcXHRmOfs7IyhQ4fiypUrBqis7KlUqRLkcnmu89PT0zmmjA6FhoaiSZMmGtO9vb3xyy+/4MKFCxg1apTqyc+kO5cuXcKsWbNgbm6OkSNHomPHjjh69Ci8vLzK3PsRO7/qSXp6On7//Xfs3bsXYWFhOQ5HD5Te27/EJCMjI8+Orubm5sjIyNBjRWXX+PHjsXDhQrRv3x5169ZVm3fv3j1s2bKFzyzSIRsbG8TExOQ4r2fPnrCxscGECRMwdOhQ9O7dW8/VlS2rVq1C/fr1sX37dpiYmADIfJbU5MmT8fnnn2PRokXo2bOngavUDwYTPfn2229x4MABNG7cGJ07d4aVlZWhSyqz6tati927d+Ojjz7SOA9JSUnYs2cP6tWrZ6DqSrd58+ZpTHNwcED//v3RtGlTVK9eHQDw7Nkz3Lx5E3Xq1MHNmzfh5eWl71LLhLp16+Ls2bMYO3ZsjvPbtGmDjRs3YuzYsfj111/1XF3Z8ujRI4wfP14VSgCgevXq2LFjB6ZMmYLp06cjJiYGw4YNM2CV+sHOr3rStGlTdOvWDYsWLTJ0KWXepUuXMGbMGNja2qJ///5qd4Ls378fcXFx8PPz4+ivOvDuc4kKQiKRsCVRR/bt24fZs2djx44dOV7SyfLkyROMHj0a4eHhPBc60qJFC0yZMiXH50YplUrMmTMHBw4cgLe3N95///1S3RGZwURPWrdujYkTJ2Lw4MGGLoUA/PXXX1i8eLHa2DJA5jfIGTNmaDxMi6g0EgQBKSkpMDY2zvfBlW/fvkVMTAyqVq2qp+rKlo8++gjVq1fHkiVLcl3mp59+gr+/P2rUqIHnz58zmFDRzJ8/Hy9evMDatWsNXQplExkZidevXwPI7Ijp6Oho4IqIxEcul2P//v3YsGEDTpw4YehySqXffvsN69evx9mzZ/N8Bo6fnx+WLFlSqlsSGUz0RC6XY/bs2UhMTMSAAQPw3nvvQSaTaSxXv359A1RXdsjlcgQGBuLPP//Eixcv8PbtW5QrVw7Vq1dH27Zt4eXlpXaNl/Tj5cuXOH/+vFpIbNeuHb+d64FcLseZM2fw4sUL2NjYoH379qhQoQKAzIfKbdmyBZs2bUJUVBSqVauGoKAgA1dcOoWFheH06dNwd3dXja2Um5MnT+LBgweldrRYBhM9SUpKwnfffYejR4/mOF/4/2eElNYELAYPHjyAj48PXr9+DUEQYGVlBQsLCyQnJyMxMRESiQRVq1bF6tWr831joOKzaNEibN68WeNONalUik8//RRff/21gSor/cLDwzFixAi8ePFCNfKrmZkZVq9eDWNjY3z55ZcIDw9Ho0aNMHr0aHTt2pXPMSKdYzDRk0mTJuHUqVPo0aMHGjdunOtdOf369dNzZWXD27dv0atXL8TExMDHxwd9+vRRfSsEMt+gDxw4gNWrV8PR0RGBgYGwsLAwYMVlw4YNG7B48WJ069YNn332mSoQPnnyBBs3bsTx48fx9ddfY+TIkYYttJSaNWsWDh48iM8++wxubm4IDQ3FypUrYWFhgdjYWNSpUwfTpk1DixYtDF1qqTdixIhc50kkEpiamqJSpUrw9PREhw4d9FiZ/jGY6EmzZs0wcOBAjslgIAEBAViwYAE2btyIli1b5rrcpUuX8Nlnn+Gbb77B0KFD9Vhh2dS9e3fUrFkTq1atynG+j48Pnj59iuPHj+u5srKhXbt28PT0xI8//qiaduLECUyePBnt27fHqlWrVEPSk255eXnl2RqVkpKCsLAwKBQKeHh4YNWqVfl2WC6pOI6JnlhaWqrGaCD9O3fuHNq0aZNnKAGAVq1aoXXr1jhz5gyDiR68evUqz2+KHh4euHDhgh4rKluio6PRuHFjtWlZtw0PGDCAoUSPDh8+nO8yqamp2LFjBxYtWgQ/Pz+MGzdOD5XpH3/r9OTjjz/G4cOHoVAoDF1KmfTw4cMCN0e7u7vj4cOHOq6IgMzB1d69ZTu7+/fvw97eXo8VlS0KhQKmpqZq07I6f1taWhqiJMqDmZkZRo4ciQ8//LBAQaakYouJntSqVQunT59Gv3790K9fv1zvyunatasBqiv94uPjC3wrcPny5REfH6/jigjIvJSzefNmVKlSBcOGDVP160lOTsaWLVuwZ88efPrppwausnR79eoV7t69q/o567k4z58/h7W1tcbyvHPQ8Jo1a4ZTp04ZugydYTDRk6lTp6r+/dNPP+W4DO/K0R25XA4jo4L9ustkMqSnp+u4IgKAyZMnIyQkBEuXLsWKFSvg5OQEAIiIiEBGRgZatmyJSZMmGbjK0m358uVYvny5xvQffvhB7WfeOSgeKSkpOX6xLS0YTPRk8+bNhi6hzHv3m2FuQkND9VANAZkPTNy0aRNOnTqlNo6Jh4cHPD090bFjR96eqkMLFy40dAmkJUEQcObMGTg7Oxu6FJ3hXTl6kJaWhp07d6Ju3br44IMPDF1OmeTq6lrgDzh+M9SPlJQUfPXVV+jatSufXEtlXlxcXJ7z09LS8PTpU2zfvh0nT57Ezz//XGofbskWEz0wNTXFkiVL8M033zCYGAi/GYqPubk5/vrrL7Rr187QpRAZnLu7e4G+PBkZGWHy5MmlNpQADCZ6U6dOHbx69crQZZRZHLhOnJo3b44bN27g448/NnQpRAY1fvz4PIOJiYkJKleujFatWpX6O9V4KUdPLl68iC+//BK//vorWrdubehyiETh5cuXGD16NHr06IHBgwfjvffeM3RJRGRgDCZ64u3tjX///RcvXrxAlSpVUKVKFY3xAyQSCVavXm2gCon0r2nTplAoFKq7oGQymcZDFCUSCYKDgw1RHhEZAC/l6EnWgF0VK1aEQqHA8+fPNZbh3QdU1nTv3t3QJRCRyLDFhIj0Li0tDadPn0ZoaChsbW3Rvn171RgmRFS2scWEiPQqOjoan3zyCUJDQ1W3ZpuZmWHlypXsf0VEbDHRtytXruDcuXOqgaQqVaqE9u3b87HiVGb8+OOP2L59Oz799FO4u7vj+fPnWLVqFSwtLUv1MNtEVDAMJnoil8vx5Zdf4tSpUxAEQfUMioSEBEgkEnTp0gW//PJLqX2MNVGWbt26oVmzZmpjyxw9ehRffvkljhw5gpo1axqwOiIyND5dWE9WrlyJkydPYtSoUbh48SKuXLmCK1eu4M8//8Rnn32GoKAgrFy50tBlEuncmzdv0Lx5c7VpzZs3hyAIiI6ONlBVRCQWDCZ6cujQIfTr1w8zZsxA+fLlVdMdHBzw1VdfoW/fvjh48KABKyTSD7lcrnGrfNYtwhkZGYYoiYhEhJ1f9SQyMhKNGjXKdX6jRo1w5MgRPVZEZDjvPlAxMTERAPD8+XPVZc7s6tevr7faiMiw2MdET7p06YIGDRrg119/zXH+1KlTcefOHZw8eVLPlRHpV24PVMy6QyenaXygIlHZwRYTPenbty98fX1hZWWFkSNHonr16pBIJHj27Bk2bdqE48ePY+LEiYYuk0jn+EBFIsoLW0z0RKFQYM6cOThw4AAkEgmk0szuPUqlEoIgoF+/fpg/f75qOhERUVnEYKJn9+/fxx9//KEax6Ry5cpo164dXF1dDVwZERGR4TGYEBERkWiwj4kO9erVS6vlJRIJbxkmIqIyjcFEh2xtbQu0XFRUFP79918+XZiIiMo8BhMdCggIyHN+ZGQkfv/9d+zcuRMymQy9e/fWU2VERETixGBiAFFRUVi3bh127dqFjIwM9OrVC+PGjUO1atUMXRoREZFBMZjoUVYLSfZA4uPjg6pVqxq6NCIiIlFgMNGDyMhIrFu3Drt370ZGRgZ69+6NcePGMZAQERG9g8FEhyIiIlSBRKFQoE+fPvD29mYgISIiygXHMdGhxo0bQy6Xo27duhg7diyqVKmS72v4sDIiIirLGEx0KPtorvndCsyHlREREfFSjk7xYWVERETaYYsJERERiQYfZUtERESiwWBCREREosFgQkRERKLBYEJERESiwWBCRHrh6+sLFxcXXL58uUxun4gKhsGEqJTZt28fXFxcsG/fvhznDx8+HC4uLnquioioYBhMiIiISDQYTIiIiEg0OPIrUQkgl8uxc+dOnDt3Do8fP0Z0dDSsrKzQvHlz+Pj4oF69egCAmTNnYv/+/QCAWbNmYdasWap1PHjwQO0STvZ/9+vXD4sWLQIA7NmzB6dPn8aDBw8QGRkJc3NzNGzYEGPGjIG7u3uO9V29ehX+/v64efMmEhIS4ODggIYNG2LkyJFwc3PLc98ePnyIzz//HCkpKVi9enW+y+fk1KlT2LZtG+7evYvk5GQ4OjqiefPmGDNmDJydnfN8rbb7e+LECQQEBODJkydISkqCjY0NateujcGDB6Nbt26q5f7++2/4+fnh/v37iIuLg7W1NWrUqIE+ffpg0KBBWu8jUVnBYEJUAsTHx2PBggVwc3ODp6cnrK2t8fLlS5w5cwbnz5/Hli1b0KhRI3Tu3BkJCQk4ffo0OnXqhLp166qtZ8KECdi/fz9evXqFCRMmqKZnX27u3LlwdXVFq1atYG9vj/DwcJw6dQqjRo2Cr68vOnfurLbOTZs2YeHChTAzM0Pnzp1RqVIlhIeHIzg4GCdOnMgzaFy7dg3jxo2Dubk5tm7dmm+IyMmiRYvg7+8PW1tbdOrUCQ4ODnjz5g0uXbqE+vXr57tObfZ327Zt+OGHH+Do6IguXbrA1tYWkZGRuH37Nk6ePKkKJufOnYO3tzesra3RqVMnODo6IiYmBvfv30dgYCCDCVFeBCISvbS0NCEsLExj+sOHD4UmTZoII0eOVE3bu3ev4OzsLOzduzfHdQ0bNkxwdnbOdVsvXrzQmBYeHi54eHgIXbt2VZseEhIiuLq6Ch4eHsLLly/V5imVSrWaV6xYITg7Owt///23IAiCcOrUKaFRo0ZCt27dhFevXuVaT17OnDkjODs7C15eXkJMTIzavPT0dCEyMjLX7Rdmf/v16yfUr19fiIqK0nhN9u1PmDBBcHZ2FkJCQvJcjog0sY8JUQlgYmKCChUqaEyvU6cOWrZsiatXryI9Pb1YtlW1alWNaU5OTujWrRuePXuGV69eqabv2LEDSqUSU6ZMQZUqVdReI5FIcqwZAHbv3o2JEyfC2dkZ27ZtQ6VKlQpV67Zt2wAAc+bMgZ2dndo8IyMjlC9fPt91aLO/AGBsbAwjI83G5ne3DwCmpqYFWo6I/sNLOUQlREhICPz8/BAcHIyoqCiNIBIbGwsnJ6cib+fly5dYu3Yt/v77b4SHh0Mul6vNj4iIQOXKlQEAt27dAgB4eHgUeP0bN27EmTNn4OHhAV9fX1hYWBS61lu3bsHExAQtWrQo9Dq02d+ePXvi559/hpeXF7y8vODu7o7mzZvD0tJS7TU9e/ZEUFAQBg0aBC8vL7Rq1QrNmzeHvb19oeskKisYTIhKgOvXr+PTTz8FALRp0wY1atSAhYUFJBIJTp06hfv372t8oBbG8+fP8dFHHyEpKQktW7ZEhw4dYGlpCalUiitXruDKlStq20lKSoJEIoGjo2OBtxEcHAwAaNu2bZFCSdb2K1SoAKm0cI2/2u7v6NGjYWtri+3bt8Pf3x8bNmyAkZERPD09MWvWLFXrS48ePWBsbIyNGzdix44d2Lp1KyQSCVq2bImZM2dq9P0hov8wmBCVAGvWrIFcLsfWrVs1OpPevHmz2LazceNGxMfHY/HixejTp4/avG+//RZXrlxRm2ZlZQVBEBAZGZnrZZt3zZ8/H6tXr8bChQshlUoxYsSIQtdrZWWFyMhIKJXKQoUTbfdXIpFg4MCBGDhwIGJjYxEcHIzDhw/j2LFjeP78OQ4ePAiZTAYA6Ny5Mzp37oykpCRcv34dJ0+exJ49e/D555/j2LFjsLa2LvR+E5Vm7GNCVAK8ePECtra2GqEkJSUF9+7dU5uW9QGtUChyXFde81+8eAEA6NSpk9p0QRBw48YNjeUbNWoEALh48WJBdgMAYG1tjY0bN6JBgwaYP38+Nm3aVODX5rR9uVyuESAKStv9zc7Ozg6dO3fGsmXL4O7ujsePH+P58+cay1laWqJdu3b48ccf0a9fP0RFReGff/4pVL1EZQGDCVEJULlyZcTHx+PRo0eqaQqFAj/99BNiYmLUlrW1tQUAhIWF5bguGxsbAMCbN29y3A7w3+WWLOvWrcPDhw81lv/kk08gk8mwbNkyjU6igiAgPDw8xxqsra3h7++Phg0bYsGCBdi4cWOOy+Vn6NChADJbYeLi4tTmZWRkICoqKs/Xa7u/ly9fhiAIatPS09MRHx8P4L/OrlevXs0x+GWdq5w6xRJRJl7KISoBhg0bhosXL2LIkCHo0aMHTExMcOXKFYSHh6NFixZqLQZNmjSBmZkZNm3ahPj4eFWHSx8fHwCAu7s7Tpw4gUmTJqFt27YwNTWFq6srOnbsiE8++QT79u3DpEmT0KNHD9ja2uLmzZu4d+8e2rdvj3PnzqnV5eLigtmzZ2PevHnw8vJCp06dULlyZURGRuLatWvw9PTEnDlzctynrHAyevRoLFy4EAAwcuRIrY6Lp6cnPvvsM2zYsAHdunVD586d4eDggPDwcFy6dAmfffZZnuvUdn/Hjx8PS0tLNG7cGJUqVUJGRgb++usvPH78GN26dVMFnXnz5iEiIgLNmzdH5cqVIZFIEBwcjFu3bqFJkyZo3ry5VvtJVJYwmBCVAB06dMCKFSuwdu1aHDx4EGZmZnB3d8fKlSuxcuVKtWVtbW2xYsUK+Pr6Yvfu3UhNTQXwXzD5+OOP8erVKxw9ehR+fn7IyMhAv3790LFjR9SrVw/r16/HsmXLEBQUBJlMhqZNm2L79u04c+aMxgc1kBma6tSpA39/f1y4cAFv376Fg4MDGjdujB49euS5X1ZWVtiwYQM+//xzLFy4EEqlEp999plWx+brr79G06ZNsWXLFpw4cQJpaWlwdHSEu7s72rRpk+drtd3fadOm4cKFC7h9+zbOnj0Lc3NzVKtWDd9//z0GDhyoWm7s2LEICgrC3bt3cfHiRRgZGaFy5cqYPn06hgwZouqHQkSaJMK77ZJEREREBsI+JkRERCQaDCZEREQkGuxjQkSikZCQUODbhydOnKjjaojIENjHhIhEIzQ0VGNMkdw8ePBAx9UQkSEwmBAREZFosI8JERERiQaDCREREYkGgwkRERGJBoMJERERiQaDCREREYkGgwkRERGJBoMJERERiQaDCREREYnG/wFXu2NAIfi1hgAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Attack class bar plot\n",
        "plot = attack_class_dist[['frequency_percent_train', 'frequency_percent_test']].plot(kind=\"bar\");\n",
        "plot.set_title(\"Attack Class Distribution\", fontsize=20);\n",
        "plot.grid(color='lightgray', alpha=0.5);"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "Nl8DjPSu41zo",
        "outputId": "d09a154a-b43d-4255-c926-96c4c3287101"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   duration protocol_type   service flag  src_bytes  dst_bytes  land  \\\n",
              "0         0           tcp  ftp_data   SF        491          0     0   \n",
              "1         0           udp     other   SF        146          0     0   \n",
              "2         0           tcp   private   S0          0          0     0   \n",
              "3         0           tcp      http   SF        232       8153     0   \n",
              "4         0           tcp      http   SF        199        420     0   \n",
              "\n",
              "   wrong_fragment  urgent  hot  num_failed_logins  logged_in  num_compromised  \\\n",
              "0               0       0    0                  0          0                0   \n",
              "1               0       0    0                  0          0                0   \n",
              "2               0       0    0                  0          0                0   \n",
              "3               0       0    0                  0          1                0   \n",
              "4               0       0    0                  0          1                0   \n",
              "\n",
              "   root_shell  su_attempted  num_root  num_file_creations  num_shells  \\\n",
              "0           0             0         0                   0           0   \n",
              "1           0             0         0                   0           0   \n",
              "2           0             0         0                   0           0   \n",
              "3           0             0         0                   0           0   \n",
              "4           0             0         0                   0           0   \n",
              "\n",
              "   num_access_files  is_host_login  is_guest_login  count  srv_count  \\\n",
              "0                 0              0               0      2          2   \n",
              "1                 0              0               0     13          1   \n",
              "2                 0              0               0    123          6   \n",
              "3                 0              0               0      5          5   \n",
              "4                 0              0               0     30         32   \n",
              "\n",
              "   serror_rate  srv_serror_rate  rerror_rate  srv_rerror_rate  same_srv_rate  \\\n",
              "0          0.0              0.0          0.0              0.0           1.00   \n",
              "1          0.0              0.0          0.0              0.0           0.08   \n",
              "2          1.0              1.0          0.0              0.0           0.05   \n",
              "3          0.2              0.2          0.0              0.0           1.00   \n",
              "4          0.0              0.0          0.0              0.0           1.00   \n",
              "\n",
              "   diff_srv_rate  srv_diff_host_rate  dst_host_count  dst_host_srv_count  \\\n",
              "0           0.00                0.00             150                  25   \n",
              "1           0.15                0.00             255                   1   \n",
              "2           0.07                0.00             255                  26   \n",
              "3           0.00                0.00              30                 255   \n",
              "4           0.00                0.09             255                 255   \n",
              "\n",
              "   dst_host_same_srv_rate  dst_host_diff_srv_rate  \\\n",
              "0                    0.17                    0.03   \n",
              "1                    0.00                    0.60   \n",
              "2                    0.10                    0.05   \n",
              "3                    1.00                    0.00   \n",
              "4                    1.00                    0.00   \n",
              "\n",
              "   dst_host_same_src_port_rate  dst_host_srv_diff_host_rate  \\\n",
              "0                         0.17                         0.00   \n",
              "1                         0.88                         0.00   \n",
              "2                         0.00                         0.00   \n",
              "3                         0.03                         0.04   \n",
              "4                         0.00                         0.00   \n",
              "\n",
              "   dst_host_serror_rate  dst_host_srv_serror_rate  dst_host_rerror_rate  \\\n",
              "0                  0.00                      0.00                  0.05   \n",
              "1                  0.00                      0.00                  0.00   \n",
              "2                  1.00                      1.00                  0.00   \n",
              "3                  0.03                      0.01                  0.00   \n",
              "4                  0.00                      0.00                  0.00   \n",
              "\n",
              "   dst_host_srv_rerror_rate attack_class  \n",
              "0                      0.00       Normal  \n",
              "1                      0.00       Normal  \n",
              "2                      0.00          DoS  \n",
              "3                      0.01       Normal  \n",
              "4                      0.00       Normal  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7588b28d-29fd-40a2-aa38-efef17fa7df4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>duration</th>\n",
              "      <th>protocol_type</th>\n",
              "      <th>service</th>\n",
              "      <th>flag</th>\n",
              "      <th>src_bytes</th>\n",
              "      <th>dst_bytes</th>\n",
              "      <th>land</th>\n",
              "      <th>wrong_fragment</th>\n",
              "      <th>urgent</th>\n",
              "      <th>hot</th>\n",
              "      <th>num_failed_logins</th>\n",
              "      <th>logged_in</th>\n",
              "      <th>num_compromised</th>\n",
              "      <th>root_shell</th>\n",
              "      <th>su_attempted</th>\n",
              "      <th>num_root</th>\n",
              "      <th>num_file_creations</th>\n",
              "      <th>num_shells</th>\n",
              "      <th>num_access_files</th>\n",
              "      <th>is_host_login</th>\n",
              "      <th>is_guest_login</th>\n",
              "      <th>count</th>\n",
              "      <th>srv_count</th>\n",
              "      <th>serror_rate</th>\n",
              "      <th>srv_serror_rate</th>\n",
              "      <th>rerror_rate</th>\n",
              "      <th>srv_rerror_rate</th>\n",
              "      <th>same_srv_rate</th>\n",
              "      <th>diff_srv_rate</th>\n",
              "      <th>srv_diff_host_rate</th>\n",
              "      <th>dst_host_count</th>\n",
              "      <th>dst_host_srv_count</th>\n",
              "      <th>dst_host_same_srv_rate</th>\n",
              "      <th>dst_host_diff_srv_rate</th>\n",
              "      <th>dst_host_same_src_port_rate</th>\n",
              "      <th>dst_host_srv_diff_host_rate</th>\n",
              "      <th>dst_host_serror_rate</th>\n",
              "      <th>dst_host_srv_serror_rate</th>\n",
              "      <th>dst_host_rerror_rate</th>\n",
              "      <th>dst_host_srv_rerror_rate</th>\n",
              "      <th>attack_class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>tcp</td>\n",
              "      <td>ftp_data</td>\n",
              "      <td>SF</td>\n",
              "      <td>491</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>150</td>\n",
              "      <td>25</td>\n",
              "      <td>0.17</td>\n",
              "      <td>0.03</td>\n",
              "      <td>0.17</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.05</td>\n",
              "      <td>0.00</td>\n",
              "      <td>Normal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>udp</td>\n",
              "      <td>other</td>\n",
              "      <td>SF</td>\n",
              "      <td>146</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.08</td>\n",
              "      <td>0.15</td>\n",
              "      <td>0.00</td>\n",
              "      <td>255</td>\n",
              "      <td>1</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.60</td>\n",
              "      <td>0.88</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>Normal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>tcp</td>\n",
              "      <td>private</td>\n",
              "      <td>S0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>123</td>\n",
              "      <td>6</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.05</td>\n",
              "      <td>0.07</td>\n",
              "      <td>0.00</td>\n",
              "      <td>255</td>\n",
              "      <td>26</td>\n",
              "      <td>0.10</td>\n",
              "      <td>0.05</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>DoS</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>tcp</td>\n",
              "      <td>http</td>\n",
              "      <td>SF</td>\n",
              "      <td>232</td>\n",
              "      <td>8153</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>30</td>\n",
              "      <td>255</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.03</td>\n",
              "      <td>0.04</td>\n",
              "      <td>0.03</td>\n",
              "      <td>0.01</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.01</td>\n",
              "      <td>Normal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>tcp</td>\n",
              "      <td>http</td>\n",
              "      <td>SF</td>\n",
              "      <td>199</td>\n",
              "      <td>420</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>30</td>\n",
              "      <td>32</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.09</td>\n",
              "      <td>255</td>\n",
              "      <td>255</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>Normal</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7588b28d-29fd-40a2-aa38-efef17fa7df4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7588b28d-29fd-40a2-aa38-efef17fa7df4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7588b28d-29fd-40a2-aa38-efef17fa7df4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ef15a92c-9614-4bee-b4af-35d5a7522769\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ef15a92c-9614-4bee-b4af-35d5a7522769')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ef15a92c-9614-4bee-b4af-35d5a7522769 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dfkdd_train"
            }
          },
          "metadata": {},
          "execution_count": 17
        }
      ],
      "source": [
        "dfkdd_train.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "crI9KcJ94-bq"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "scaler = StandardScaler()\n",
        "\n",
        "# extract numerical attributes and scale it to have zero mean and unit variance\n",
        "cols = dfkdd_train.select_dtypes(include=['float64','int64']).columns\n",
        "sc_train = scaler.fit_transform(dfkdd_train.select_dtypes(include=['float64','int64']))\n",
        "sc_test = scaler.fit_transform(dfkdd_test.select_dtypes(include=['float64','int64']))\n",
        "\n",
        "# turn the result back to a dataframe\n",
        "sc_traindf = pd.DataFrame(sc_train, columns = cols)\n",
        "sc_testdf = pd.DataFrame(sc_test, columns = cols)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6DNdAyPt5CKq"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "encoder = LabelEncoder()\n",
        "\n",
        "# extract categorical attributes from both training and test sets\n",
        "cattrain = dfkdd_train.select_dtypes(include=['object']).copy()\n",
        "cattest = dfkdd_test.select_dtypes(include=['object']).copy()\n",
        "\n",
        "# encode the categorical attributes\n",
        "traincat = cattrain.apply(encoder.fit_transform)\n",
        "testcat = cattest.apply(encoder.fit_transform)\n",
        "\n",
        "# separate target column from encoded data\n",
        "enctrain = traincat.drop(['attack_class'], axis=1)\n",
        "enctest = testcat.drop(['attack_class'], axis=1)\n",
        "\n",
        "cat_Ytrain = traincat[['attack_class']].copy()\n",
        "cat_Ytest = testcat[['attack_class']].copy()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pYpntUdZ5Oer",
        "outputId": "1b92435d-4097-421c-a434-ccb35eecbff7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original dataset shape Counter({1: 67343, 0: 45927, 2: 11656, 3: 995, 4: 52})\n",
            "Resampled dataset shape Counter({1: 67343, 0: 67343, 3: 67343, 2: 67343, 4: 67343})\n"
          ]
        }
      ],
      "source": [
        "from imblearn.over_sampling import RandomOverSampler\n",
        "from collections import Counter\n",
        "\n",
        "# define columns and extract encoded train set for sampling\n",
        "sc_traindf = dfkdd_train.select_dtypes(include=['float64','int64'])\n",
        "refclasscol = pd.concat([sc_traindf, enctrain], axis=1).columns\n",
        "refclass = np.concatenate((sc_train, enctrain.values), axis=1)\n",
        "X = refclass\n",
        "\n",
        "# reshape target column to 1D array shape\n",
        "c, r = cat_Ytest.values.shape\n",
        "y_test = cat_Ytest.values.reshape(c,)\n",
        "\n",
        "c, r = cat_Ytrain.values.shape\n",
        "y = cat_Ytrain.values.reshape(c,)\n",
        "\n",
        "# apply the random over-sampling\n",
        "ros = RandomOverSampler(random_state=42)\n",
        "# Use fit_resample instead of fit sample\n",
        "X_res, y_res = ros.fit_resample(X, y)\n",
        "print('Original dataset shape {}'.format(Counter(y)))\n",
        "print('Resampled dataset shape {}'.format(Counter(y_res)))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Ca0yQiew5U2B",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 628
        },
        "outputId": "55808d67-1851-4a4e-e0fb-631a65bb0065"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1100x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "rfc = RandomForestClassifier();\n",
        "\n",
        "# fit random forest classifier on the training set\n",
        "rfc.fit(X_res, y_res);\n",
        "# extract important features\n",
        "score = np.round(rfc.feature_importances_,3)\n",
        "importances = pd.DataFrame({'feature':refclasscol,'importance':score})\n",
        "importances = importances.sort_values('importance',ascending=False).set_index('feature')\n",
        "# plot importances\n",
        "plt.rcParams['figure.figsize'] = (11, 4)\n",
        "importances.plot.bar();"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qCwk9KMh5Z_4"
      },
      "outputs": [],
      "source": [
        "from sklearn.feature_selection import RFE\n",
        "import itertools\n",
        "rfc = RandomForestClassifier()\n",
        "\n",
        "# create the RFE model and select 10 attributes\n",
        "rfe = RFE(rfc, n_features_to_select=10)\n",
        "rfe = rfe.fit(X_res, y_res)\n",
        "\n",
        "# summarize the selection of the attributes\n",
        "feature_map = [(i, v) for i, v in itertools.zip_longest(rfe.get_support(), refclasscol)]\n",
        "selected_features = [v for i, v in feature_map if i==True]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xdx1-ufO5fXF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b6d661dd-cf46-48d3-d542-78ca95001108"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['src_bytes',\n",
              " 'dst_bytes',\n",
              " 'logged_in',\n",
              " 'count',\n",
              " 'srv_count',\n",
              " 'dst_host_srv_count',\n",
              " 'dst_host_diff_srv_rate',\n",
              " 'dst_host_same_src_port_rate',\n",
              " 'dst_host_serror_rate',\n",
              " 'service']"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ],
      "source": [
        "selected_features"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "G_9yZN2J5sE4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2ca3641d-e71e-4295-d95b-e015db9443af"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(22544, 41)"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ],
      "source": [
        "# define columns to new dataframe\n",
        "newcol = list(refclasscol)\n",
        "newcol.append('attack_class')\n",
        "\n",
        "# add a dimension to target\n",
        "new_y_res = y_res[:, np.newaxis]\n",
        "\n",
        "# create a dataframe from sampled data\n",
        "res_arr = np.concatenate((X_res, new_y_res), axis=1)\n",
        "res_df = pd.DataFrame(res_arr, columns = newcol)\n",
        "\n",
        "# create test dataframe\n",
        "reftest = pd.concat([sc_testdf, testcat], axis=1)\n",
        "reftest['attack_class'] = reftest['attack_class'].astype(np.float64)\n",
        "reftest['protocol_type'] = reftest['protocol_type'].astype(np.float64)\n",
        "reftest['flag'] = reftest['flag'].astype(np.float64)\n",
        "reftest['service'] = reftest['service'].astype(np.float64)\n",
        "\n",
        "res_df.shape\n",
        "reftest.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7Kxgq4m75xkS"
      },
      "outputs": [],
      "source": [
        "from collections import defaultdict\n",
        "classdict = defaultdict(list)\n",
        "\n",
        "# create two-target classes (normal class and an attack class)\n",
        "attacklist = [('DoS', 0.0), ('Probe', 2.0), ('R2L', 3.0), ('U2R', 4.0)]\n",
        "normalclass = [('Normal', 1.0)]\n",
        "\n",
        "def create_classdict():\n",
        "    '''This function subdivides train and test dataset into two-class attack labels'''\n",
        "    for j, k in normalclass:\n",
        "        for i, v in attacklist:\n",
        "            restrain_set = res_df.loc[(res_df['attack_class'] == k) | (res_df['attack_class'] == v)]\n",
        "            classdict[j +'_' + i].append(restrain_set)\n",
        "            # test labels\n",
        "            reftest_set = reftest.loc[(reftest['attack_class'] == k) | (reftest['attack_class'] == v)]\n",
        "            classdict[j +'_' + i].append(reftest_set)\n",
        "\n",
        "create_classdict()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5jL2myfq52no"
      },
      "outputs": [],
      "source": [
        "for k, v in classdict.items():\n",
        "    k"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kYG42JBX52GV"
      },
      "outputs": [],
      "source": [
        "pretrain = classdict['Normal_DoS'][0]\n",
        "pretest = classdict['Normal_DoS'][1]\n",
        "grpclass = 'Normal_DoS'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cw4PAgmq51_o",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f72f116d-d025-45ef-e266-bf7a247439f8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X_train:\n",
            " [[0.1 1.  0.  1.  0. ]\n",
            " [0.2 2.  0.  0.  1. ]\n",
            " [0.3 3.  0.  1.  0. ]\n",
            " [0.4 4.  1.  0.  0. ]]\n",
            "Y_train:\n",
            " [0 1 0 1]\n",
            "X_test:\n",
            " [[0.5 5.  0.  1.  0. ]\n",
            " [0.6 6.  0.  0.  1. ]]\n",
            "Y_test:\n",
            " [0 1]\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "\n",
        "# Sample code to initialize pretrain and pretest dataframes\n",
        "# Replace with actual data loading code\n",
        "pretrain = pd.DataFrame({\n",
        "    'service': ['http', 'smtp', 'http', 'ftp'],\n",
        "    'feature1': [0.1, 0.2, 0.3, 0.4],\n",
        "    'feature2': [1, 2, 3, 4],\n",
        "    'attack_class': [0, 1, 0, 1]\n",
        "})\n",
        "\n",
        "pretest = pd.DataFrame({\n",
        "    'service': ['http', 'smtp'],\n",
        "    'feature1': [0.5, 0.6],\n",
        "    'feature2': [5, 6],\n",
        "    'attack_class': [0, 1]\n",
        "})\n",
        "\n",
        "selected_features = ['service', 'feature1', 'feature2']\n",
        "\n",
        "# Preparing the training data\n",
        "Xresdf = pretrain\n",
        "Xresdfnew = Xresdf[selected_features]\n",
        "Xresdfnum = Xresdfnew.drop(['service'], axis=1)\n",
        "Xresdfcat = Xresdfnew[['service']].copy()\n",
        "\n",
        "# Preparing the test data\n",
        "newtest = pretest\n",
        "Xtest_features = newtest[selected_features]\n",
        "Xtestdfnum = Xtest_features.drop(['service'], axis=1)\n",
        "Xtestcat = Xtest_features[['service']].copy()\n",
        "\n",
        "# Initialize the OneHotEncoder\n",
        "enc = OneHotEncoder(handle_unknown='ignore')\n",
        "\n",
        "# Fit the encoder on the training data\n",
        "enc.fit(Xresdfcat)\n",
        "\n",
        "# Transform the training data\n",
        "X_train_1hotenc = enc.transform(Xresdfcat).toarray()\n",
        "\n",
        "# Transform the test data\n",
        "X_test_1hotenc = enc.transform(Xtestcat).toarray()\n",
        "\n",
        "# Concatenate numerical and encoded categorical features for training and test data\n",
        "X_train = np.concatenate((Xresdfnum.values, X_train_1hotenc), axis=1)\n",
        "X_test = np.concatenate((Xtestdfnum.values, X_test_1hotenc), axis=1)\n",
        "\n",
        "# Prepare target variables for training and test data\n",
        "y_train = Xresdf[['attack_class']].copy()\n",
        "c, r = y_train.values.shape\n",
        "Y_train = y_train.values.reshape(c,)\n",
        "\n",
        "y_test = newtest[['attack_class']].copy()\n",
        "c, r = y_test.values.shape\n",
        "Y_test = y_test.values.reshape(c,)\n",
        "\n",
        "print(\"X_train:\\n\", X_train)\n",
        "print(\"Y_train:\\n\", Y_train)\n",
        "print(\"X_test:\\n\", X_test)\n",
        "print(\"Y_test:\\n\", Y_test)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4GdtmNSr6MU8"
      },
      "outputs": [],
      "source": [
        "from sklearn.svm import SVC\n",
        "from sklearn.naive_bayes import BernoulliNB\n",
        "from sklearn import tree\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import VotingClassifier\n",
        "\n",
        "# Train KNeighborsClassifier Model\n",
        "KNN_Classifier = KNeighborsClassifier(n_jobs=-1)\n",
        "KNN_Classifier.fit(X_train, Y_train);\n",
        "\n",
        "# Train LogisticRegression Model\n",
        "LGR_Classifier = LogisticRegression(n_jobs=-1, random_state=0)\n",
        "LGR_Classifier.fit(X_train, Y_train);\n",
        "\n",
        "# Train Gaussian Naive Baye Model\n",
        "BNB_Classifier = BernoulliNB()\n",
        "BNB_Classifier.fit(X_train, Y_train)\n",
        "\n",
        "# Train Decision Tree Model\n",
        "DTC_Classifier = tree.DecisionTreeClassifier(criterion='entropy', random_state=0)\n",
        "DTC_Classifier.fit(X_train, Y_train);\n",
        "\n",
        "# Train RandomForestClassifier Model\n",
        "#RF_Classifier = RandomForestClassifier(criterion='entropy', n_jobs=-1, random_state=0)\n",
        "#RF_Classifier.fit(X_train, Y_train);\n",
        "\n",
        "# Train SVM Model\n",
        "#SVC_Classifier = SVC(random_state=0)\n",
        "#SVC_Classifier.fit(X_train, Y_train)\n",
        "\n",
        "## Train Ensemble Model (This method combines all the individual models above except RandomForest)\n",
        "#combined_model = [('Naive Baye Classifier', BNB_Classifier),\n",
        "#                  ('Decision Tree Classifier', DTC_Classifier),\n",
        "#                  ('KNeighborsClassifier', KNN_Classifier),\n",
        "#                  ('LogisticRegression', LGR_Classifier)\n",
        "#                 ]\n",
        "#VotingClassifier =  VotingClassifier(estimators = combined_model,voting = 'soft', n_jobs=-1)\n",
        "#VotingClassifier.fit(X_train, Y_train);"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LmjzQRHZ6MFZ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "38a8ad9a-4a66-4d6c-94a7-4fd8d948e99e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X_train:\n",
            " [[0.1 1.  0.  1.  0. ]\n",
            " [0.2 2.  0.  0.  1. ]\n",
            " [0.3 3.  0.  1.  0. ]\n",
            " [0.4 4.  1.  0.  0. ]]\n",
            "Y_train:\n",
            " [0 1 0 1]\n",
            "X_test:\n",
            " [[0.5 5.  0.  1.  0. ]\n",
            " [0.6 6.  0.  0.  1. ]]\n",
            "Y_test:\n",
            " [0 1]\n",
            "KNN Accuracy: 0.5\n",
            "KNN Confusion Matrix:\n",
            "[[2 0]\n",
            " [2 0]]\n",
            "KNN Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.50      1.00      0.67         2\n",
            "           1       0.00      0.00      0.00         2\n",
            "\n",
            "    accuracy                           0.50         4\n",
            "   macro avg       0.25      0.50      0.33         4\n",
            "weighted avg       0.25      0.50      0.33         4\n",
            "\n",
            "DecisionTree Accuracy: 1.0\n",
            "DecisionTree Confusion Matrix:\n",
            "[[2 0]\n",
            " [0 2]]\n",
            "DecisionTree Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00         2\n",
            "           1       1.00      1.00      1.00         2\n",
            "\n",
            "    accuracy                           1.00         4\n",
            "   macro avg       1.00      1.00      1.00         4\n",
            "weighted avg       1.00      1.00      1.00         4\n",
            "\n",
            "SVM Accuracy: 1.0\n",
            "SVM Confusion Matrix:\n",
            "[[2 0]\n",
            " [0 2]]\n",
            "SVM Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00         2\n",
            "           1       1.00      1.00      1.00         2\n",
            "\n",
            "    accuracy                           1.00         4\n",
            "   macro avg       1.00      1.00      1.00         4\n",
            "weighted avg       1.00      1.00      1.00         4\n",
            "\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn import metrics\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.svm import SVC\n",
        "\n",
        "# Sample code to initialize pretrain and pretest dataframes\n",
        "# Replace with actual data loading code\n",
        "pretrain = pd.DataFrame({\n",
        "    'service': ['http', 'smtp', 'http', 'ftp'],\n",
        "    'feature1': [0.1, 0.2, 0.3, 0.4],\n",
        "    'feature2': [1, 2, 3, 4],\n",
        "    'attack_class': [0, 1, 0, 1]\n",
        "})\n",
        "\n",
        "pretest = pd.DataFrame({\n",
        "    'service': ['http', 'smtp'],\n",
        "    'feature1': [0.5, 0.6],\n",
        "    'feature2': [5, 6],\n",
        "    'attack_class': [0, 1]\n",
        "})\n",
        "\n",
        "selected_features = ['service', 'feature1', 'feature2']\n",
        "\n",
        "# Preparing the training data\n",
        "Xresdf = pretrain\n",
        "Xresdfnew = Xresdf[selected_features]\n",
        "Xresdfnum = Xresdfnew.drop(['service'], axis=1)\n",
        "Xresdfcat = Xresdfnew[['service']].copy()\n",
        "\n",
        "# Preparing the test data\n",
        "newtest = pretest\n",
        "Xtest_features = newtest[selected_features]\n",
        "Xtestdfnum = Xtest_features.drop(['service'], axis=1)\n",
        "Xtestcat = Xtest_features[['service']].copy()\n",
        "\n",
        "# Initialize the OneHotEncoder\n",
        "enc = OneHotEncoder(handle_unknown='ignore')\n",
        "\n",
        "# Fit the encoder on the training data\n",
        "enc.fit(Xresdfcat)\n",
        "\n",
        "# Transform the training data\n",
        "X_train_1hotenc = enc.transform(Xresdfcat).toarray()\n",
        "\n",
        "# Transform the test data\n",
        "X_test_1hotenc = enc.transform(Xtestcat).toarray()\n",
        "\n",
        "# Concatenate numerical and encoded categorical features for training and test data\n",
        "X_train = np.concatenate((Xresdfnum.values, X_train_1hotenc), axis=1)\n",
        "X_test = np.concatenate((Xtestdfnum.values, X_test_1hotenc), axis=1)\n",
        "\n",
        "# Prepare target variables for training and test data\n",
        "y_train = Xresdf[['attack_class']].copy()\n",
        "c, r = y_train.values.shape\n",
        "Y_train = y_train.values.reshape(c,)\n",
        "\n",
        "y_test = newtest[['attack_class']].copy()\n",
        "c, r = y_test.values.shape\n",
        "Y_test = y_test.values.reshape(c,)\n",
        "\n",
        "print(\"X_train:\\n\", X_train)\n",
        "print(\"Y_train:\\n\", Y_train)\n",
        "print(\"X_test:\\n\", X_test)\n",
        "print(\"Y_test:\\n\", Y_test)\n",
        "\n",
        "# Define the models\n",
        "models = [\n",
        "    ('KNN', KNeighborsClassifier(n_neighbors=2)),  # Adjusted to 2 neighbors\n",
        "    ('DecisionTree', DecisionTreeClassifier()),\n",
        "    ('SVM', SVC())\n",
        "]\n",
        "\n",
        "# Fit and evaluate models\n",
        "for name, model in models:\n",
        "    model.fit(X_train, Y_train)\n",
        "    accuracy = metrics.accuracy_score(Y_train, model.predict(X_train))\n",
        "    confusion_matrix = metrics.confusion_matrix(Y_train, model.predict(X_train))\n",
        "    classification_report = metrics.classification_report(Y_train, model.predict(X_train))\n",
        "\n",
        "    print(f\"{name} Accuracy: {accuracy}\")\n",
        "    print(f\"{name} Confusion Matrix:\\n{confusion_matrix}\")\n",
        "    print(f\"{name} Classification Report:\\n{classification_report}\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mPZXR_3GFMAc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d81eeff7-4c45-4216-f68a-ac14ef56a153"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jiugmdZy6rBs",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1c94157e-4b48-429a-a41b-cf55429eabfc"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "============================== Normal_DoS KNN Model Test Results ==============================\n",
            "\n",
            "Model Accuracy:\n",
            " 0.5\n",
            "\n",
            "Confusion matrix:\n",
            " [[1 0]\n",
            " [1 0]]\n",
            "\n",
            "Classification report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.50      1.00      0.67         1\n",
            "           1       0.00      0.00      0.00         1\n",
            "\n",
            "    accuracy                           0.50         2\n",
            "   macro avg       0.25      0.50      0.33         2\n",
            "weighted avg       0.25      0.50      0.33         2\n",
            "\n",
            "\n",
            "\n",
            "============================== Normal_DoS DecisionTree Model Test Results ==============================\n",
            "\n",
            "Model Accuracy:\n",
            " 1.0\n",
            "\n",
            "Confusion matrix:\n",
            " [[1 0]\n",
            " [0 1]]\n",
            "\n",
            "Classification report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00         1\n",
            "           1       1.00      1.00      1.00         1\n",
            "\n",
            "    accuracy                           1.00         2\n",
            "   macro avg       1.00      1.00      1.00         2\n",
            "weighted avg       1.00      1.00      1.00         2\n",
            "\n",
            "\n",
            "\n",
            "============================== Normal_DoS SVM Model Test Results ==============================\n",
            "\n",
            "Model Accuracy:\n",
            " 0.5\n",
            "\n",
            "Confusion matrix:\n",
            " [[0 1]\n",
            " [0 1]]\n",
            "\n",
            "Classification report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.00      0.00      0.00         1\n",
            "           1       0.50      1.00      0.67         1\n",
            "\n",
            "    accuracy                           0.50         2\n",
            "   macro avg       0.25      0.50      0.33         2\n",
            "weighted avg       0.25      0.50      0.33         2\n",
            "\n",
            "\n"
          ]
        }
      ],
      "source": [
        "for i, v in models:\n",
        "    accuracy = metrics.accuracy_score(Y_test, v.predict(X_test))\n",
        "    confusion_matrix = metrics.confusion_matrix(Y_test, v.predict(X_test))\n",
        "    classification = metrics.classification_report(Y_test, v.predict(X_test))\n",
        "    print()\n",
        "    print('============================== {} {} Model Test Results =============================='.format(grpclass, i))\n",
        "    print()\n",
        "    print (\"Model Accuracy:\" \"\\n\", accuracy)\n",
        "    print()\n",
        "    print(\"Confusion matrix:\" \"\\n\", confusion_matrix)\n",
        "    print()\n",
        "    print(\"Classification report:\" \"\\n\", classification)\n",
        "    print()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.save(os.path.join(directory_path, 'model.h5'))"
      ],
      "metadata": {
        "id": "b3vGQ-H2HBti",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "86080103-35d4-4a31-9672-1b57089aa85a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "'SVC' object has no attribute 'save'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-32-12714512a29b>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdirectory_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'model.h5'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m: 'SVC' object has no attribute 'save'"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "nbformat": 4,
  "nbformat_minor": 0
}